# -*- coding: utf-8 -*-
"""sketch_clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16rMEUs19cP0bIFO1dcUNWwfpGJhk95j2
"""

!pip install efficientnet_pytorch

from efficientnet_pytorch import EfficientNet
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

import os
import logging
import torch
import pickle
from tqdm import tqdm
from torchvision import transforms
import numpy as np
import pandas as pd
from PIL import Image
import matplotlib.pyplot as plt

data_path = '/content/drive/MyDrive/Colab/Draw_Project/Sketch_RNN/torch_sketch/test/'
os.chdir(data_path)
data_list = []
with os.scandir(data_path) as files:
    for file in files:
        if file.name.endswith('.npy'):
            data_list.append(file.name)

#Efficient Net
tfms = transforms.Compose([transforms.Resize(224), transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),])

def feature_extraction(image, model):
    img = tfms(Image.fromarray(image.reshape(28,28)).convert("RGB")).unsqueeze(0)
    features = model.extract_features(img)
    return features

#VGG 16
# from keras.applications.vgg16 import VGG16 
# from keras.models import Model
# from keras.applications.vgg16 import preprocess_input 
# model = VGG16()
# model = Model(inputs=model.inputs, outputs=model.layers[-2].output)
# def feature_extraction(image):
#     img = Image.fromarray(image.reshape(28,28)).convert("RGB")
#     t_img = tfms(img).unsqueeze(0)
#     v_img = preprocess_input(t_img)
#     feat = model.predict(v_img, use_multiprocessing=True)
#     return feat

data = {}
p = r"/content/drive/MyDrive/Colab/Draw_Project/Sketch_RNN/torch_sketch/sktch_log.pkl"
model = EfficientNet.from_pretrained('efficientnet-b0')
for npy in tqdm(data_list):
    image_list = np.load(npy)
    for i, image in enumerate(image_list[:500]):
      # try:
        feat = feature_extraction(image, model)
        feat = feat.detach().numpy().reshape(-1)
        name = npy.split('.')[0] + '_' + str(i)
        data[name] = (feat)
      # except:
      #   with open(p,'wb') as file:
      #     pickle.dump(data,file)

feat = np.array(list(data.values()))
filenames = np.array(list(data.keys()))
np.save("/content/drive/MyDrive/Colab/Draw_Project/Sketch_RNN/torch_sketch/features.npy", feat)
np.save("/content/drive/MyDrive/Colab/Draw_Project/Sketch_RNN/torch_sketch/filenames.npy", filenames)

from sklearn.decomposition import PCA
pca = PCA(n_components=2, random_state=0)
pca.fit(feat)
x = pca.transform(feat)

# from sklearn.manifold import TSNE
# tsne = TSNE(n_components=2, init='pca', random_state=0)
# x = tsne.fit_transform(feat)

from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=len(data_list), n_jobs=-1, random_state = 0)
kmeans.fit(x)

# holds the cluster id and the images { id: [images] }
groups = {}
for file, cluster in zip(filenames, kmeans.labels_):
    if cluster not in groups.keys():
        groups[cluster] = []
        groups[cluster].append(file)
    else:
        groups[cluster].append(file)

groups